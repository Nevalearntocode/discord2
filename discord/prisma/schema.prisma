// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts      Account[]
  profile       Profile?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}


model Profile {
  id                    String           @id @default(cuid())
  userId                String           @unique
  name                  String        
  imageUrl              String?          @db.Text
  email                 String        
  hashtag               String           @unique

  friends               Friend[]
  currents              Friend[]         @relation("currentProfile")
  sender                FriendRequest[]  @relation("requestOne")
  receiver              FriendRequest[]  @relation("requestTwo")

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  servers               Server[]
  members               Member[]
  messages              DirectMessage[]
  conversationInitiated Conversation[]   @relation("profileOne")
  conversationReceived  Conversation[]   @relation("profileTwo")


  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // @@unique([hashtag, name])
}

model Friend {
  id                    String    @id @default(cuid())

  otherId               String
  other                 Profile   @relation(fields: [otherId], references: [id], onDelete: Cascade)

  currentId             String    
  current               Profile   @relation("currentProfile", fields: [currentId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model FriendRequest {
  id                    String    @id @default(cuid())

  profileOneId          String
  profileOne            Profile   @relation("requestOne", fields: [profileOneId], references: [id], onDelete: Cascade)
          
  profileTwoId          String  
  profileTwo            Profile   @relation("requestTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
}

model Server {
  id            String    @id @default(cuid())
  name          String
  slug          String    @unique
  public        Boolean   @default(false)
  imageUrl      String    @db.Text
  inviteCode    String    @unique

  ownerId       String
  owner         Profile   @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  roles         Role[]
  members       Member[]
  channels      Channel[]

  @@index([ownerId])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Role {
  id          String     @id @default(cuid())
  name        String

  serverId    String
  server      Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  viewChannels    Boolean    @default(true)
  manageChannels  Boolean    @default(false)
  manageRoles     Boolean    @default(false)
  manageServer    Boolean    @default(false)
  createInvite    Boolean    @default(false)
  manageNickname  Boolean    @default(true)
  kickMember      Boolean    @default(false)
  banMember       Boolean    @default(false)
  sendMessages    Boolean    @default(true)
  manageMessages  Boolean    @default(false)
  connect         Boolean    @default(true)
  speak           Boolean    @default(true)
  mute            Boolean    @default(false)
  deafen          Boolean    @default(false)
  moveMember      Boolean    @default(false)
  administrator   Boolean    @default(false)

  members         Member[]
  privateChannel  Channel[]

  @@unique([name, serverId])
}

model Member {
  id                    String    @id @default(cuid())
  
  nickname              String

  roles                 Role[]

  profileId             String
  profile               Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId              String  
  server                Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages              Message[]
  channels              Channel[] @relation("publicChannel")
  privateChannels       Channel[]



  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([profileId])
  @@index([serverId])
  @@unique([profileId, serverId])
}

enum ChannelType {
  VOICE
  TEXT
  VIDEO
}

model Channel {
  id                  String      @id @default(cuid())
  name                String
  type                ChannelType @default(TEXT)

  serverId            String
  server              Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  isPrivate           Boolean     @default(false)
  messages            Message[]
  
  roles               Role[]
  privateMembers      Member[]  
  members             Member[]    @relation("publicChannel")

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@unique([name, type, serverId])
  @@index([serverId])
}

model Message {
  id                 String  @id @default(cuid())
  content            String  @db.Text

  fileUrl            String? @db.Text

  memberId           String
  member             Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId          String
  channel            Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted            Boolean @default(false)

  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt

  @@index([memberId])
  @@index([channelId])
}

model Conversation {
  id                 String  @id @default(cuid())

  profileOneId String
  profileOne   Profile @relation("profileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String
  profileTwo   Profile @relation("profileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  messages DirectMessage[]

  @@index([profileOneId])
  @@index([profileTwoId])

  @@unique([profileOneId, profileTwoId])
}

model DirectMessage {
  id                 String       @id @default(cuid())
  content            String       @db.Text

  fileUrl            String?      @db.Text

  // memberId           String
  // member             Member  @relation(fields: [memberId], references: [id], onDelete: Cascade)

  profileId          String
  profile            Profile      @relation(fields: [profileId], references: [id], onDelete: Cascade)

  conversationId     String
  conversation       Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted            Boolean      @default(false)

  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt

  @@index([profileId])
  @@index([conversationId])
}
