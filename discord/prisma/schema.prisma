// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?

  accounts      Account[]
}

model Profile {
  id            String    @id @default(cuid())
  userId        String    @unique
  name          String
  imageUrl      String?    @db.Text
  email         String
  // comeback to this later: colum with 4 digits minimum 4 characters
  // hashtag       Int       @default(autoincrement())

  servers       Server[]
  members       Member[]
  
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // @@unique([hashtag, name])
}

model Server {
  id            String    @id @default(cuid())
  name          String
  url           String    @unique
  public        Boolean   @default(false)
  imageUrl      String    @db.Text
  inviteCode    String    @unique

  profileId     String
  profile       Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  roles         Role[]
  members       Member[]
  channels      Channel[]

  @@index([profileId])

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Permission {
  FULLACCESS
  ACCESS
  READONLY
  BLOCKED
}

model Role {
  id          String     @id @default(cuid())
  name        String
  permission  Permission @default(ACCESS)
  
  serverId    String
  server      Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)

  members     Member[]

  @@unique([name, serverId])
}

model Member {
  id                    String    @id @default(cuid())
  
  roles                 Role[]

  channels              Channel[] @relation("access")
  blockedChannels       Channel[] @relation("blocked")
  readOnlyChannels      Channel[] @relation("readOnly")
  fullAccessChannels    Channel[] @relation("fullAccess")


  profileId             String
  profile               Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId              String  
  server                Server    @relation(fields: [serverId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([profileId])
  @@index([serverId])
  @@unique([profileId, serverId])
}

enum ChannelType {
  VOICE
  TEXT
  VIDEO
}

model Channel {
  id                  String      @id @default(cuid())
  name                String
  type                ChannelType @default(TEXT)

  serverId            String
  server              Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)

  members             Member[]    @relation("access")
  blockedMembers      Member[]    @relation("blocked")
  readOnlyMembers     Member[]    @relation("readOnly")
  fullAccessMembers   Member[]    @relation("fullAccess")

  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt

  @@unique([name, type, serverId])
  @@index([serverId])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}